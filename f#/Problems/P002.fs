namespace ProjectEuler

module ``Problem 2`` =
    open NUnit.Framework
    open FsUnit
    
    //Problem Text
    // Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
    // By starting with 1 and 2, the first 10 terms will be:
    //
    //   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    //
    // By considering the terms in the Fibonacci sequence whose values do not exceed four million,
    // find the sum of the even-valued terms.

    let positiveIntegers = 1 |> Seq.unfold (fun i -> Some (i, i + 1))

    let fibonacci =
        Seq.unfold
            (fun (current, next) -> Some(current, (next, current + next)))
            (1, 2)

    [<Test>]
    let ``first ten terms of fib seq`` () = fibonacci |> Seq.take 10 |> should equal [ 1; 2; 3; 5; 8; 13; 21; 34; 55; 89]

    let evenFibonacci = fibonacci |> Seq.filter (fun i -> i % 2 = 0)

    [<Test>]
    let ``first ten even terms of fib seq`` () = evenFibonacci |> Seq.take 3 |> should equal [ 2; 8; 34; ]

    [<Test>]
    [<Category("Solution")>]
    let solution () =
        evenFibonacci
        |> Seq.takeWhile (fun i -> i < 4000000 )
        |> Seq.sum
        |> should equal 4613732

